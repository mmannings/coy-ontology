# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  artifacts:
    expire_in: 7 days

include:
  - templates/cd.yml

workflow:
  rules:
    - changes:
        - global/coy.ttl
        - disaster/em_dat_classification.ttl
        - mapping/coy_wikidata.ttl
        - scripts
        - rdfunit-tests
        - .gitlab-ci.yml
        - templates
        - Taskfile.yml
        - docu-ontology

services:
  - name: docker:dind
    alias: docker


stages:
  - validation
  - interprete
  - generate_shapes
  - reasoner
  - version
  - tag
  # Now CD part
  - cd

syntax: # Has to run everytime because it prepares the RDF files
  stage: .pre
  image:
    name: pheyvaer/raptor
    entrypoint: [""]
  artifacts:
    when: always
    paths:
      - "./rdfunit-tests/allTests.ttl"
      - "./main.ttl"
      - "./main.xml"
    public: false
  script:
    # Concatenation
    - rapper -o ntriples -i turtle disaster/em_dat_classification.ttl > main.n3
    - rapper -o ntriples -i turtle global/coy.ttl >> main.n3
    - rapper -o ntriples -i turtle mapping/coy_wikidata.ttl >> main.n3.ttl >> main.n3
    # Parsing to other formats
    - rapper -o turtle -i ntriples main.n3 > main.ttl
    - rapper -o rdfxml -i ntriples main.n3 > main.xml
    # Preparing tests
    - rm -f ./rdfunit-tests/allTests* && cat ./rdfunit-tests/*.ttl > ./rdfunit-tests/allTests_.ttl
    - rapper -o turtle -i turtle ./rdfunit-tests/allTests_.ttl > ./rdfunit-tests/allTests.ttl


rdfunit:
  stage: validation
  needs: ["syntax"]
  rules:
    - if: '$CI_COMMIT_TAG !~ /^verified20/'
  image:
    name: aksw/rdfunit
    entrypoint: [""]
  artifacts:
    when: always
    paths:
      - "./RDFUnit_results.jsonld"
      - "./RDFUnit_manual_results.jsonld"
    public: false
  script:
    - java -jar /app/rdfunit-validate.jar -d ./main.ttl -f /tmp/ -o json-ld -s owl,rdfs -r shacl
    - cp /tmp/results/._main.ttl.shaclTestCaseResult.jsonld ./RDFUnit_results.jsonld
    - cat ./RDFUnit_results.jsonld
    - java -jar /app/rdfunit-validate.jar -A -v -d ./main.ttl -s ./rdfunit-tests/allTests.ttl -r shacl -o json-ld -C -f /tmp/
    - cp /tmp/results/._main.ttl.shaclTestCaseResult.jsonld ./RDFUnit_manual_results.jsonld
    - cat ./RDFUnit_manual_results.jsonld


oops:
  stage: validation
  needs: ["syntax"]
  rules:
    - if: '$CI_COMMIT_TAG !~ /^verified20/'
  image:
    name: tboonx/oops_caller:0.3
    entrypoint: [""]
  artifacts:
    when: always
    paths:
      - "./oops_result.xml"
    public: false
  script:
    - /bin/sh /script.sh main
    - cp result.xml oops_result.xml


interprete:
  stage: interprete
  rules:
    - if: '$CI_COMMIT_TAG !~ /^verified20/'
  image:
    name: alpine/xml
    entrypoint: [""]
  artifacts:
    when: always
    paths:
      - "./RDFUnit_errors_.txt"
      - "./reports.txt"
    public: false
  script:
    - apk update
    - apk upgrade
    - apk add bash
    - bash -c "./scripts/interprete.sh"

generate_shapes:
  stage: generate_shapes
  rules:
    - if: $CI_COMMIT_TAG =~ /^verified20/
  when: manual
  image:
    name: docker:latest
  variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_TLS_CERTDIR: ""
  artifacts:
    when: always
    paths:
      - "./shapes.ttl"
  script:
    - apk add --update curl git moreutils && rm -rf /var/cache/apk/*
    - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin && PATH=$HOME/.local/bin:$PATH
    - task generate_shapes

reasoner:
  stage: reasoner
  rules:
    - if: '$CI_COMMIT_TAG !~ /^verified20/'
  image:
    name: tboonx/hermit:0.1
    entrypoint: [""]
  artifacts:
    when: always
    paths:
      - "./infered_classes.owl"
  script:
    - java -jar /hermit/HermiT.jar -cO -v2 -o infered_classes.owl ./main.xml
    - cat infered_classes.owl

# Atm only the coy.ttl file versions are checked
version:
  stage: version
  rules:
    - if: $CI_COMMIT_TAG !~ /^verified20/ && ( $CI_COMMIT_BRANCH  != "main" && $CI_COMMIT_REF_NAME != "main" )
  image:
    name: bitnami/git
    entrypoint: [""]
  script:
    - git config --global user.email "kjunghanns@informatik.uni-leipzig.de" &&  git config --global user.name "bot_push_coypu"
    - . scripts/helper.sh
    # get coy.ttl from main
    - git fetch --depth=1 origin main
    - git show --format=raw $( git ls-tree -r main | grep global/coy.ttl | awk '{ print $3; }' ) > ./coy.main.ttl
    # exit if there was no change in the vocab file
    - exit_if_no_file_change ./coy.main.ttl ./global/coy.ttl
    # value of branchs owl:versionInfo has to be higher
    - owl_version_increase_test ./coy.main.ttl ./global/coy.ttl
    # owl:priorVersion of this branch is lower than owl:versionInfo of this branch
    - owl_version_compare ./global/coy.ttl

tag:
  stage: tag
  rules:
    - if: $CI_COMMIT_TAG !~ /^verified20/ && ( $CI_COMMIT_BRANCH  == "main" || $CI_COMMIT_REF_NAME == "main" )
  image:
    name: alpine/git:latest
    entrypoint: [""]
  script:
    - git config --global user.email "kjunghanns@informatik.uni-leipzig.de" &&  git config --global user.name "bot_push_coypu"
    # Update the classes
    - git add infered_classes.owl && ./scripts/try_commit.sh
    # Add the tag
    - export now=$(date "+%Y.%m.%d_%H.%M")
    - git tag -a -m "Verified by CI" verified$now
    # Push it to the repository - credentials are not set yet
    - git push https://bot_push_coypu:$GITLAB_PAC_PUSH@gitlab.com/coypu-project/coy-ontology.git HEAD:main --follow-tags

send_email:
    stage: .post
    rules:
      - if: '$CI_COMMIT_TAG !~ /^verified20/'
    when: always
    script:
      - |
        ls -hal &&
        export TEXT=`cat reports.txt` &&
        curl --request POST --url https://api.sendgrid.com/v3/mail/send --header "Authorization: Bearer $SENDGRID_API_KEY" --header "Content-Type: application/json" --data "{\"personalizations\": [{\"to\": [{\"email\": \"$GITLAB_USER_EMAIL\"}]}],\"from\": {\"email\": \"junghanns@infai.org\"},\"subject\": \"Gitlab Build $CI_PROJECT_NAME Pipeline\",\"content\": [{\"type\": \"text/html\", \"value\": \"<b>Repository $CI_PROJECT_NAME branch $CI_COMMIT_BRANCH: Pipeline $CI_PIPELINE_ID, job $CI_JOB_ID</b><br> More info at: <a href=\\\"$CI_PIPELINE_URL\\\">$CI_PIPELINE_URL</a><br><br>Listed below you will find the summary of RDFUnit (manual and generic test cases) and <a href=\\\"http://oops.linkeddata.es/catalogue.jsp\\\">OOPS</a> (common pitfalls).<br><br>For more information read the pipeline/job result. Please be aware that OOPS results are empty when the external serivce is not available or has issues with the ontology file. Ask InfAI if you are unsure.<br><br><br><pre>$TEXT</pre><br><br>A basic classification was also created. In order to read it, please follow the pipeline URL at the top, then click on resoner step and then on download on the right sidebar.\"}]}"
